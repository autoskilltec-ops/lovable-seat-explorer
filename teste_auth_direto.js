// TESTE DIRETO DE AUTENTICA√á√ÉO
// Execute este script no console do navegador para testar a autentica√ß√£o

// 1. Teste de conex√£o com Supabase
console.log('üîç Testando conex√£o com Supabase...');
console.log('URL:', window.supabase?.supabaseUrl);
console.log('Key:', window.supabase?.supabaseKey ? 'Presente' : 'Ausente');

// 2. Teste de registro com email √∫nico
async function testarRegistro() {
    const email = `teste_${Date.now()}@exemplo.com`;
    const senha = 'Teste123456';
    
    console.log(`üìù Testando registro com email: ${email}`);
    
    try {
        const { data, error } = await window.supabase.auth.signUp({
            email: email,
            password: senha,
            options: {
                data: {
                    full_name: 'Usu√°rio Teste',
                    phone: '11999999999'
                }
            }
        });
        
        if (error) {
            console.error('‚ùå Erro no registro:', error);
            return false;
        }
        
        console.log('‚úÖ Registro bem-sucedido:', data);
        
        // Verificar se o perfil foi criado
        const { data: profile, error: profileError } = await window.supabase
            .from('profiles')
            .select('*')
            .eq('user_id', data.user?.id)
            .single();
            
        if (profileError) {
            console.error('‚ùå Erro ao buscar perfil:', profileError);
            return false;
        }
        
        console.log('‚úÖ Perfil criado automaticamente:', profile);
        return true;
        
    } catch (err) {
        console.error('‚ùå Erro inesperado:', err);
        return false;
    }
}

// 3. Teste de login
async function testarLogin(email, senha) {
    console.log(`üîë Testando login com email: ${email}`);
    
    try {
        const { data, error } = await window.supabase.auth.signInWithPassword({
            email: email,
            password: senha
        });
        
        if (error) {
            console.error('‚ùå Erro no login:', error);
            return false;
        }
        
        console.log('‚úÖ Login bem-sucedido:', data);
        return true;
        
    } catch (err) {
        console.error('‚ùå Erro inesperado no login:', err);
        return false;
    }
}

// 4. Verificar usu√°rios existentes
async function verificarUsuarios() {
    console.log('üë• Verificando usu√°rios existentes...');
    
    try {
        const { data: users, error } = await window.supabase
            .from('profiles')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(5);
            
        if (error) {
            console.error('‚ùå Erro ao buscar usu√°rios:', error);
            return;
        }
        
        console.log('üìã √öltimos 5 perfis:', users);
        
    } catch (err) {
        console.error('‚ùå Erro inesperado:', err);
    }
}

// 5. Executar todos os testes
async function executarTestes() {
    console.log('üöÄ Iniciando testes de autentica√ß√£o...');
    
    // Verificar usu√°rios existentes
    await verificarUsuarios();
    
    // Testar registro
    const registroOk = await testarRegistro();
    
    if (registroOk) {
        console.log('üéâ Todos os testes passaram! A autentica√ß√£o est√° funcionando.');
    } else {
        console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
    }
}

// Executar testes automaticamente
executarTestes();

// Disponibilizar fun√ß√µes globalmente para testes manuais
window.testarRegistro = testarRegistro;
window.testarLogin = testarLogin;
window.verificarUsuarios = verificarUsuarios;
