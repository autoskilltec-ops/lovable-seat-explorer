// TESTE DE CONEX√ÉO E ACESSO AOS DADOS
// Execute este script no console do navegador (F12)

console.log('üîç Testando conex√£o e acesso aos dados...');

// 1. Teste de conex√£o b√°sica
async function testarConexao() {
    try {
        console.log('üì° Testando conex√£o com Supabase...');
        const { data, error } = await window.supabase
            .from('destinations')
            .select('count')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Erro de conex√£o:', error);
            return false;
        }
        
        console.log('‚úÖ Conex√£o com Supabase funcionando');
        return true;
    } catch (err) {
        console.error('‚ùå Erro inesperado na conex√£o:', err);
        return false;
    }
}

// 2. Teste de acesso aos destinos
async function testarDestinos() {
    try {
        console.log('üèñÔ∏è Testando acesso aos destinos...');
        const { data, error } = await window.supabase
            .from('destinations')
            .select('*')
            .limit(5);
            
        if (error) {
            console.error('‚ùå Erro ao buscar destinos:', error);
            return false;
        }
        
        console.log('‚úÖ Destinos carregados:', data);
        return true;
    } catch (err) {
        console.error('‚ùå Erro inesperado ao buscar destinos:', err);
        return false;
    }
}

// 3. Teste de acesso √†s viagens
async function testarViagens() {
    try {
        console.log('üöå Testando acesso √†s viagens...');
        const { data, error } = await window.supabase
            .from('trips')
            .select(`
                *,
                destination:destinations(*)
            `)
            .limit(5);
            
        if (error) {
            console.error('‚ùå Erro ao buscar viagens:', error);
            return false;
        }
        
        console.log('‚úÖ Viagens carregadas:', data);
        return true;
    } catch (err) {
        console.error('‚ùå Erro inesperado ao buscar viagens:', err);
        return false;
    }
}

// 4. Teste de acesso √†s reservas (se logado)
async function testarReservas() {
    try {
        console.log('üìã Testando acesso √†s reservas...');
        
        // Verificar se est√° logado
        const { data: { user } } = await window.supabase.auth.getUser();
        if (!user) {
            console.log('‚ö†Ô∏è Usu√°rio n√£o logado, pulando teste de reservas');
            return true;
        }
        
        const { data, error } = await window.supabase
            .from('reservations')
            .select(`
                *,
                trip:trips(
                    *,
                    destination:destinations(*)
                )
            `)
            .eq('user_id', user.id)
            .limit(5);
            
        if (error) {
            console.error('‚ùå Erro ao buscar reservas:', error);
            return false;
        }
        
        console.log('‚úÖ Reservas carregadas:', data);
        return true;
    } catch (err) {
        console.error('‚ùå Erro inesperado ao buscar reservas:', err);
        return false;
    }
}

// 5. Teste de status de autentica√ß√£o
async function testarAutenticacao() {
    try {
        console.log('üîê Testando status de autentica√ß√£o...');
        const { data: { user }, error } = await window.supabase.auth.getUser();
        
        if (error) {
            console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
            return false;
        }
        
        if (user) {
            console.log('‚úÖ Usu√°rio logado:', user.email);
            
            // Verificar perfil
            const { data: profile, error: profileError } = await window.supabase
                .from('profiles')
                .select('*')
                .eq('user_id', user.id)
                .single();
                
            if (profileError) {
                console.error('‚ùå Erro ao buscar perfil:', profileError);
                return false;
            }
            
            console.log('‚úÖ Perfil encontrado:', profile);
        } else {
            console.log('‚ö†Ô∏è Usu√°rio n√£o logado');
        }
        
        return true;
    } catch (err) {
        console.error('‚ùå Erro inesperado na autentica√ß√£o:', err);
        return false;
    }
}

// 6. Executar todos os testes
async function executarTodosOsTestes() {
    console.log('üöÄ Iniciando testes de conex√£o e dados...');
    
    const resultados = {
        conexao: await testarConexao(),
        autenticacao: await testarAutenticacao(),
        destinos: await testarDestinos(),
        viagens: await testarViagens(),
        reservas: await testarReservas()
    };
    
    console.log('üìä Resultados dos testes:', resultados);
    
    const todosPassaram = Object.values(resultados).every(resultado => resultado === true);
    
    if (todosPassaram) {
        console.log('üéâ Todos os testes passaram! A aplica√ß√£o deve estar funcionando.');
    } else {
        console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima para detalhes.');
    }
    
    return resultados;
}

// Executar testes automaticamente
executarTodosOsTestes();

// Disponibilizar fun√ß√µes globalmente para testes manuais
window.testarConexao = testarConexao;
window.testarDestinos = testarDestinos;
window.testarViagens = testarViagens;
window.testarReservas = testarReservas;
window.testarAutenticacao = testarAutenticacao;
window.executarTodosOsTestes = executarTodosOsTestes;
